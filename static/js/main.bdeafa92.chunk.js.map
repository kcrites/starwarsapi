{"version":3,"sources":["Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","category","react_default","a","createElement","className","CardList","_ref","starwars","src_Card","key","title","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchfield","reLoad","_this2","url","cat","randomCategory","Math","floor","random","fetchString","setState","fetch","then","response","json","users","render","_this3","onClick","e","handleClick","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,EAZF,SAACC,GAAU,IACfC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SACd,OAECC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACdH,EAAAC,EAAAC,cAAA,UAAKJ,GAELE,EAAAC,EAAAC,cAAA,SAAIH,KCWQK,EAhBE,SAAAC,GAA0B,IAAxBC,EAAwBD,EAAxBC,SAAUP,EAAcM,EAAdN,SAE5B,OACCC,EAAAC,EAAAC,cAAA,WAECF,EAAAC,EAAAC,cAACK,EAAD,CACCC,IAAK,EACLV,KAAQQ,EAASR,KAAQQ,EAASR,KAAOQ,EAASG,MAClDV,SAAUA,MCoECW,qBAzEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXZ,SAAU,GACVa,YAAa,GACbpB,SAAU,IALAY,mFAYVG,KAAKM,0CAIF,IAAAC,EAAAP,KAyBDQ,EATc,WACd,IAAIC,EAfc,WAClB,IAMIC,EAAiB,GAGrB,OADAA,EARiB,CAAC,CAAC,SAAS,IACR,CAAC,UAAW,IACZ,CAAC,QAAS,GACV,CAAC,UAAW,IACZ,CAAC,WAAY,IACb,CAAC,YAAY,KAEbC,KAAKC,MAAsB,EAAhBD,KAAKE,WAE7BH,EAKGA,GACVD,EAAI,GAAKE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAI,IAAI,EAC5C,IAAIK,EAAc,wBAGlB,OAFAA,EAAcA,EAAcL,EAAI,GAAK,IAAMA,EAAI,GAAK,IACpDF,EAAKQ,SAAS,CAAC9B,SAAUwB,EAAI,KACtBK,EAGDA,GAERE,MAAMR,GACLS,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIb,EAAKQ,SAAS,CAACvB,SAAU4B,4CAQ1CpB,KAAKM,SACLN,KAAKqB,0CAII,IAAAC,EAAAtB,KAEN,OACGd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,UAAQmC,QAAS,SAACC,GAAD,OAAOF,EAAKG,YAAYD,KAAzC,WACAtC,EAAAC,EAAAC,cAACsC,EAAD,CAAUlC,SAAUQ,KAAKI,MAAMZ,SAAUP,SAAUe,KAAKI,MAAMnB,mBAlEvD0C,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASZ,OAAOnC,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.bdeafa92.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\tconst { name, category } = props;\n\treturn(\n\t\t\n\t\t<div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow'>\n\t\t\t<h2>{name}</h2>\n\t\t\t\n\t\t\t<p>{category}</p>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({starwars, category}) => {\n\t\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t(<Card \n\t\t\t\tkey={1}\n\t\t\t\tname={ (starwars.name) ? starwars.name : starwars.title}\n\t\t\t\tcategory={category}\n\t\t\t\t//films={starwars.films}\n\t\t\t/>)\n\t\t\t}\n\t\t</div>\n\t\t);\n}\n\nexport default CardList;","import React, { Component } from 'react';\n//import {starwars} from './starwars';\nimport CardList from './CardList';\n//import SearchBox from './SearchBox';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {  // creates state for 2 fields so that we can share them acrosss components\n      starwars: [],\n      searchfield: '',\n      category: ''\n      }\n    }\n\n  componentDidMount(){\n    \n \n      this.reLoad();\n    }\n\n\nreLoad() {\n    \n    let  randomCategory = () => {\n        let categories = [['people',87]\n                          , ['planets', 61]\n                          , ['films', 7]\n                          , ['species', 37]\n                          , ['vehicles', 39]\n                          , ['starships',37]];\n        let randomCategory = [];\n        let categoryIndex = Math.floor(Math.random() * 6);\n        randomCategory = categories[categoryIndex];\n        return randomCategory;\n      };\n\n    \n    let fetchString = () => {\n        var cat = randomCategory();\n        cat[1] = Math.floor(Math.random() * cat[1])+1;\n        var fetchString = 'https://swapi.co/api/';\n        fetchString = fetchString + cat[0] + '/' + cat[1] + '/';\n        this.setState({category: cat[0]});\n        return fetchString;\n      }\n\n    let url = fetchString();\n\n      fetch(url)\n      .then(response => response.json())\n      .then(users => this.setState({starwars: users}));\n \n    };\n\n\n  //captures button click event\n  handleClick()  {\n    //console.log('onSC', this);\n    this.reLoad();\n    this.render();\n    \n  }\n\n    render() {\n\n       return (\n          <div className='tc'>\n           <h1>Star Wars</h1>\n          \n           <button onClick={(e) => this.handleClick(e)}>Another</button>\n           <CardList starwars={this.state.starwars} category={this.state.category}/>\n        </div>\n        );\n       }\n}\n\n  \n\nexport default App;\n//\n\n// <SearchBox searchchange ={(this.onSearchChange())}/>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}